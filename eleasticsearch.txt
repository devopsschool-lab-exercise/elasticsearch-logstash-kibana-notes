=======================================================================================
Prerequisite of Elasticsearch- JDK 8
=======================================================================================
$ sudo yum install wget -y
$ wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz"

$ tar -zxvf jdk-8u181-linux-x64.tar.gz
$ sudo mv jdk1.8.0_181 /opt/
$ export JAVA_HOME=/opt/jdk1.8.0_181
$ export PATH=$PATH:$JAVA_HOME/bin
$ java -version
=======================================================================================
Install & Configuration of Elasticsearch - OSS VERSION
=======================================================================================
How to install using RPM
https://www.elastic.co/guide/en/elasticsearch/reference/6.4/rpm.html

=======================================================================================
Install & Configuration of Elasticsearch - OSS VERSION
=======================================================================================
How to install using Tar ball
https://www.elastic.co/guide/en/elasticsearch/reference/6.4/zip-targz.html
$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-oss-6.4.0.zip
$ sudo yum install unzip -y
$ unzip elasticsearch-oss-6.4.0.zip
$ cd elasticsearch-oss-6.4.0
# SINGLE NODE
./bin/elasticsearch

# Clustor NODE
./bin/elasticsearch -Ecluster.name=devopsschool -Enode.name=my_first_node

=======================================================================================
Elasticsearch Configuration files
=======================================================================================
/etc/elasticsearch
/etc/elasticsearch/elasticsearch.yml

/etc/sysconfig/elasticsearch



=======================================================================================
Elasticsearch VERIFICATION
=======================================================================================
$ curl http://localhost:9200
{
  "name" : "0qn0pX_",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "rLRval0BQu6haI7JKw-tIQ",
  "version" : {
    "number" : "6.4.0",
    "build_flavor" : "oss",
    "build_type" : "zip",
    "build_hash" : "595516e",
    "build_date" : "2018-08-17T23:18:47.308994Z",
    "build_snapshot" : false,
    "lucene_version" : "7.4.0",
    "minimum_wire_compatibility_version" : "5.6.0",
    "minimum_index_compatibility_version" : "5.0.0"
  },
  "tagline" : "You Know, for Search"
}
=======================================================================================
To check the health of Elasticsearch
=======================================================================================

The cat API - The cat API print the info in JSON format, compact and aligned text which is easy to read by Human eyes. 

All the cat commands accept a query string parameter "help" to see all the headers and info they provide, and the /_cat command alone lists all the available commands.

$ curl -X GET "localhost:9200/_cat"

=======================================================================================
Verbose
=======================================================================================
Each of the commands accepts a query string parameter v to turn on verbose output.\
$ curl -X GET "localhost:9200/_cat/master?v"

=======================================================================================
Help
=======================================================================================
Each of the commands accepts a query string parameter help which will output its available columns.
$ curl -X GET "localhost:9200/_cat/master?help"

=======================================================================================
Headers
=======================================================================================
Each of the commands accepts a query string parameter h which forces only those columns to appear.
$ curl -X GET 'localhost:9200/_cat/nodes?h=ip,port,heapPercent,name'


=======================================================================================
Few CAT Commands Output
=======================================================================================
# Check node’s health status:
curl -XGET 'localhost:9200/_cluster/health?pretty'
curl -XGET 'localhost:9200/_cat/health?v'
curl localhost:9200/_cat/health?help
curl 'localhost:9200/_cat/health?format=json&pretty'

curl -XGET 'localhost:9200/_cat/indices?pretty'


curl -XGET 'localhost:9200/_cat/nodes?pretty'
curl -XGET 'localhost:9200/_cat/nodes?pretty'
curl localhost:9200/_cat/nodes?v
curl localhost:9200/_cat/nodes?help
curl 'localhost:9200/_cat/nodes?format=json&pretty'

curl -XGET 'localhost:9200/_cat/shards?pretty'
curl -XGET 'localhost:9200/_cat/shards?pretty'
curl localhost:9200/_cat/shards?v
curl localhost:9200/_cat/shards?help
curl 'localhost:9200/_cat/shards?format=json&pretty'

curl -XGET 'localhost:9200/_cat/master?pretty'
curl localhost:9200/_cat/master?v
curl localhost:9200/_cat/master?help
curl 'localhost:9200/_cat/master?format=json&pretty'

#List all indices
curl -XGET 'localhost:9200/_cat/indices?pretty'
curl localhost:9200/_cat/indices?v
curl localhost:9200/_cat/indices?help
curl 'localhost:9200/_cat/indices?format=json&pretty'


=======================================================================================
Understanding Elasticsearch Keywords and Terminology
=======================================================================================
https://www.devopsschool.com/blog/understanding-elasticsearch-keywords-and-terminology/
https://www.devopsschool.com/blog/understanding-elasticsearch-index-mapping-schema/



=======================================================================================
Elasticsearch Workflow - CRUD Operations
=======================================================================================
https://www.devopsschool.com/blog/understanding-rest-http-method-get-post-put-head-delete/
Create
Read
Update
Delete

FORMAT
curl -X<VERB> '<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>' -d '<BODY>'

VERB - GET, POST, PUT, HEAD, or DELETE.
GET (Retrieve information)
POST (Create + Update)
PUT (Create + Update)
DELETE (Remove)



PROTOCOL - http or https

=======================================================================================
CURL TO HTTP
=======================================================================================
Status codes indicate the result of the HTTP request.

1XX – informational
2XX – success
3XX – redirection
4XX – client error
5XX – server error

=======================================================================================
Demo 1 - curl and listing all indices 


curl -XGET 'localhost:9200/_cat/indices?v&pretty'

# To create products index
curl -XPUT 'localhost:9200/products?&pretty'

# To create products-temp index
curl -XPUT 'localhost:9200/products-temp?&pretty'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

# To create customers index
curl -XPUT 'localhost:9200/customers?&pretty'

# To create orders index
curl -XPUT 'localhost:9200/orders?&pretty'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

=======================================================================================
Index and Query a document
=======================================================================================
products -> index
mobiles - Category OR TYPE
1 - index UUID
-d - Content of the document in JSON BODY


curl -XPUT 'localhost:9200/products/mobiles/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 7",
  "camera": "12MP",
  "storage": "256GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

---OUTPUT------
{
  "_index" : "products",
  "_type" : "mobiles",
  "_id" : "1",
  "_version" : 1,
  "result" : "created",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 0,
  "_primary_term" : 1
}

{
  "name": "iPhone 7",
  "camera": "12MP",
  "storage": "256GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'
---OUTPUT------

curl -XPUT 'localhost:9200/products/mobiles/2?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Samsung Galaxy",
  "camera": "8MP",
  "storage": "128GB",
  "display": "5.2inch",
  "battery": "1,500mAh",
  "reviews": ["Best Android phone", "I love it!"]
}
'

curl -XPOST 'localhost:9200/products/mobiles?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

ERROR
--------
Multiple mapping types are not supported in indices created in 6.0
------------------------------
curl -XPUT 'localhost:9200/products/laptops/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Macbook Pro",
  "storage": "500GB",
  "RAM": "8GB",
  "display": "13inch",
  "os": "El Capitan",
  "reviews": ["A little bulky but a great Mac laptop", "The larger storage capacity is great"]
}
'

curl -XPUT 'localhost:9200/products/laptops?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Macbook Pro",
  "storage": "500GB",
  "RAM": "8GB",
  "display": "13inch",
  "os": "El Capitan",
  "reviews": ["A little bulky but a great Mac laptop", "The larger storage capacity is great"]
}
'

ERROR
--------
Multiple mapping types are not supported in indices created in 6.0
------------------------------
curl -XPUT 'localhost:9200/products-temp/laptops/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Macbook Pro",
  "storage": "500GB",
  "RAM": "8GB",
  "display": "13inch",
  "os": "El Capitan",
  "reviews": ["A little bulky but a great Mac laptop", "The larger storage capacity is great"]
}
'


curl -XPUT 'localhost:9200/products-temp/laptops/2?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Dell",
  "storage": "1TB",
  "RAM": "8GB",
  "display": "14inch",
  "os": "Windows 10",
  "reviews": ["Great work laptop", "Not too heavy"]
}
'

curl -XPOST 'localhost:9200/products/mobiles?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

curl -XPOST 'localhost:9200/products/mobiles/4?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'



========================
PUT VS POST DEMO PENDING
================================
POST - CREATE + UPDATE
PUT - CREATE + UPDATE (IDEOMPOTENT)

The only difference - POST can be used to achieve auto-generation of ids whereas a PUT is used when you want to specify an id.

It's all about REST semantics. POST basically that you are posting a request which is going to modify the server state. POST index/type { "foo": "bar" } will generate an _id server side and will index the document with this _id. PUT is used to send a resource to the server. PUT index/type/id { "foo": "bar" } will put or update a document named index/type/id in the server. 

The two commands are not at all the same. The first one (with POST) will update a full document, not only the field you're sending.

The second one (with PUT) will do a partial update and only update the fields you're sending, and not touch the other ones already present in the document.

curl -XPOST 'localhost:9200/products/mobiles?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

curl -XPUT 'localhost:9200/products/mobiles?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'
curl -XGET 'localhost:9200/products/_search?pretty=true&q=*:*'


=======================================================================================
DO YOU WANT TO UNDERSTAND THE INDEX MAPPING
=======================================================================================
https://www.devopsschool.com/blog/understanding-elasticsearch-index-mapping-schema/

=======================================================================================
Fetching whole documents
=======================================================================================
curl -XGET 'localhost:9200/products/mobiles/1'
curl -XGET 'localhost:9200/products/mobiles/1?pretty'
curl -XGET 'localhost:9200/products/mobiles/2?pretty'
curl -XGET 'localhost:9200/products/mobiles/3?pretty'
curl -XGET 'localhost:9200/products/mobiles/4?pretty'

curl -XGET 'localhost:9200/products-temp/laptops/1?pretty'
curl -XGET 'localhost:9200/products-temp/laptops/10?pretty'


How to count number of documents in index

count provides quick access to the document count of the entire cluster, or individual indices.
$ curl localhost:9200/_cat/count?v

Or for a single index:
-------------------------
$ curl 'localhost:9200/_cat/count/products?v'

----------------------------

=======================================================================================
Fetching partial documents
=======================================================================================
curl -XGET 'localhost:9200/products/mobiles/1?pretty'
curl -XGET 'localhost:9200/products/mobiles/1?pretty&_source=false'
curl -XGET 'localhost:9200/products/mobiles/1?pretty&_source=name,reviews'
curl -XGET 'localhost:9200/products/mobiles/1?pretty&_source=name,reviews,storage'
curl -XGET 'localhost:9200/products-temp/laptops/1?pretty&_source=name,RAM,storage'


=======================================================================================
Updating whole and partial documents
=======================================================================================

curl -XGET 'localhost:9200/products/mobiles/3?pretty'

curl -XPUT 'localhost:9200/products/mobiles/13?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Xiaomi Note",
  "camera": "12MP",
  "storage": "256GB",
  "display": "5.5inch",
  "battery": "1,800mAh",
  "reviews": ["Really love Xiaomi products", "Too large to use easily"]
}
'

=======================================================================================
Partial Updates using the _update API with "doc"
=======================================================================================
https://www.devopsschool.com/blog/understanding-the-update-api-in-elasticsearch/

curl -XGET 'localhost:9200/products/mobiles/2?pretty'

curl -XPOST 'localhost:9200/products/mobiles/2/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "doc": {
     "color": "black"
  }
}
'

curl -XGET 'localhost:9200/products/mobiles/2?pretty'

curl -XPOST 'localhost:9200/products/mobiles/2/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "doc": {
     "reviews": ["Best Android phone", "I love it!", "Samsung is my favorite"],
     "texture": "smooth"
  }
}
'
=======================================================================================
Updates using the _update API with "script"
=======================================================================================
curl -XGET 'localhost:9200/products'
curl -XGET 'localhost:9200/products?pretty'
curl -XGET 'localhost:9200/products/_search?pretty=true&q=*:*'

curl -XPUT 'localhost:9200/products-shoe?&pretty'

curl -XPUT 'localhost:9200/products-shoe/shoes/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Nike",
  "size": 8,
  "color": "white"
}
'

curl -XGET 'localhost:9200/products-shoe/shoes/1?pretty'

curl -XPOST 'localhost:9200/products-shoe/shoes/1/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "script": "ctx._source.size += 2"
}
'
curl -XGET 'localhost:9200/products-shoe/shoes/1?pretty'


curl -XGET 'localhost:9200/products-shoe/shoes/2?pretty'

curl -XPOST 'localhost:9200/products-shoe/shoes/2/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "script": "ctx._source.size -= 1"
}
'
curl -XGET 'localhost:9200/products-shoe/shoes/2?pretty'

=======================================================================================
Deleting an index
======================================================================================= 
curl -XGET 'localhost:9200/products/mobiles/2?pretty'
curl -XDELETE 'localhost:9200/products/mobiles/2?pretty'
curl -XGET 'localhost:9200/products/mobiles/2?pretty'

-------------------
curl -i -XHEAD 'localhost:9200/products/mobiles/2?pretty'
curl -i -XHEAD 'localhost:9200/products/mobiles/1?pretty'
--------------------

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

curl -XDELETE 'localhost:9200/orders?pretty'
curl -XDELETE 'localhost:9200/products?pretty'
curl -XDELETE 'localhost:9200/products-shoe?pretty'
curl -XDELETE 'localhost:9200/products-temp?pretty'
curl -XDELETE 'localhost:9200/customers?pretty'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'


How to get previous version of docuents?
====================================
No, you can't do this using the builtin versioning. All that does is to store the current version number to prevent you applying updates out of order.

If you wanted to keep multiple versions available, then you'd have to implement that yourself. Depending on how many versions you are likely to want to store, you could take three approaches:

=======================================================================================
Demo 7 - Bulk indexing documents
=======================================================================================

=======================================================================================
Multi-get
=======================================================================================

curl -XGET 'localhost:9200/products/_search?pretty=true&q=*:*'


curl -XGET 'localhost:9200/_mget?pretty' -H 'Content-Type: application/json' -d'
{
    "docs" : [
        {
            "_index" : "products",
            "_type" : "mobiles",
            "_id" : "DtqRnm8Bs7KPfWLVKRPv"
        },
        {
            "_index" : "products",
            "_type" : "mobiles",
            "_id" : "2"
        }
    ]
}
'


curl -XGET 'localhost:9200/_mget?pretty' -H 'Content-Type: application/json' -d'
{
    "docs" : [
        {
            "_index" : "products",
            "_type" : "mobiles",
            "_id" : "1"
        },
        {
            "_index" : "products",
            "_type" : "mobiles",
            "_id" : "2"
        }
    ]
}
'


curl -XGET 'localhost:9200/products/_mget?pretty' -H 'Content-Type: application/json' -d'
{
    "docs" : [
        {
            "_type" : "laptops",
            "_id" : "1"
        },
        {
            "_type" : "laptops",
            "_id" : "2"
        }
    ]
}
'

curl -XGET 'localhost:9200/products/mobiles/_mget?pretty' -H 'Content-Type: application/json' -d'
{
    "docs" : [
        {
            "_id" : "1"
        },
        {
            "_id" : "2"
        }
    ]
}
'
=======================================================================================
Index multiple documents
=======================================================================================
curl -XPOST 'localhost:9200/_bulk?pretty' -H 'Content-Type: application/json' -d'
{ "index" : { "_index" : "products", "_type" : "mobiles", "_id" : "3" } }
{ "name": "Puma","size": 9,"color": "black" }

{ "index" : { "_index" : "products", "_type" : "mobiles", "_id" : "4" } }
{ "name": "New Balance","size": 8,"color": "black" }
'

curl -XPOST 'localhost:9200/products/_bulk?pretty' -H 'Content-Type: application/json' -d'
{ "index" : {"_type" : "shoes", "_id" : "3" } }
{ "name": "Puma","size": 9,"color": "black" }
{ "index" : {"_type" : "shoes", "_id" : "4" } }
{ "name": "New Balance","size": 8,"color": "black" }
'

curl -XPOST 'localhost:9200/products/shoes/_bulk?pretty' -H 'Content-Type: application/json' -d'
{ "index" : {"_id" : "3" } }
{ "name": "Puma","size": 9,"color": "black" }
{ "index" : {"_id" : "4" } }
{ "name": "New Balance","size": 8,"color": "black" }
'

=======================================================================================
Auto-generate ids
=======================================================================================
curl -XPOST 'localhost:9200/products/mobiles/_bulk?pretty' -H 'Content-Type: application/json' -d'
{ "index" : {} }
{ "name": "Puma","size": 9,"color": "black" }
{ "index" : {} }
{ "name": "New Balance","size": 8,"color": "black" }
'

=======================================================================================
Bulk operations in one go (paste these one operation at a time)
=======================================================================================
curl -XPOST 'localhost:9200/products/shoes/_bulk?pretty' -H 'Content-Type: application/json' -d'
{ "index" : {"_id" : "3" } }
{ "name": "Puma","size": 9,"color": "black" }
{ "index" : {"_id" : "4" } }
{ "name": "New Balance","size": 8,"color": "black" }
{ "delete" : {"_id" : "2" } }
{ "create" : {"_id" : "5" } }
{ "name": "Nike Power","size": 12,"color": "black" }
{ "update" : {"_id" : "1"} }
{ "doc" : {"color" : "orange"} }
'

=======================================================================================
Bulk indexing documents from a JSON file
=======================================================================================

How to upload BULK data for Query DSL?
=============================================
cd
sudo yum install wget -y
wget https://www.devopsschool.com/notes/elastic/elasticsearch/customers_full.json

$ curl -XPUT 'localhost:9200/customers?&pretty'

$ curl -H "Content-Type: application/x-ndjson" -XPOST 'localhost:9200/customers/personal/_bulk?pretty&refresh' --data-binary @"customers_full.json"

$ curl -H "Content-Type: application/x-ndjson" -XPO         ST 'localhost:9200/customers/personal/_bulk?pretty&refresh' --data-binary @"cust         omers_full.json"
{
  "error" : {
    "root_cause" : [
      {
        "type" : "illegal_argument_exception",
        "reason" : "The bulk request must be terminated by a newline [\\n]"
      }
    ],
    "type" : "illegal_argument_exception",
    "reason" : "The bulk request must be terminated by a newline [\\n]"
  },
  "status" : 400
}

FIX - Add a New line in customers_full.json or URL BODY

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

=========================================================
=========================================================
$ more customers.json



curl -H "Content-Type: application/x-ndjson" -XPOST 'localhost:9200/customers/personal/_bulk?pretty&refresh' --data-binary @"customers.json"

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

TWO CONTEXT OF SEARCH?
1. QUERY CONTEXT (HOW WELL DOES THIS document match this query)
2. Filter CONTEXT (DOES THIS DOCUMENT MATCH THIS QUERY CLAUSE)

=======================================================================================
Create some fake data so we can perform searches
=======================================================================================


Go to: http://www.json-generator.com/

[
  '{{repeat(1000, 1000)}}',
  {
    name: '{{firstName()}} {{surname()}}',
    age: '{{integer(18, 75)}}',
    gender: '{{gender()}}',
    email: '{{email()}}',
    phone: '+1 {{phone()}}',
    street: '{{integer(100, 999)}} {{street()}}',
    city: '{{city()}}',
    state: '{{state()}}, {{integer(100, 10000)}}'
  }
]
=======================================================================================
Download and save as customers_full.json
Open customers_full.json in sublimetext
=======================================================================================
- Remove the array brackets
- Find-Replace },{ with }\n{ in the regex mode on sublime text
- Find-Replace {"name" with {"index" : {}}\n{"name" in the regex model on sublime text

Now the file is in a format that can be parsed by elastic search
=======================================================
====================================================
OR
https://github.com/mradamlacey/json-to-es-bulk



curl -XGET 'localhost:9200/_cat/indices?v&pretty'
curl -XDELETE 'localhost:9200/customers?pretty'
curl -XGET 'localhost:9200/_cat/indices?v&pretty'

=======================================================================================
Re-create the customers index 
=======================================================================================
curl -H "Content-Type: application/x-ndjson" -XPOST 'localhost:9200/customers/personal/_bulk?pretty&refresh' --data-binary @"customers_full.json"

curl -H 'Content-Type: application/json' -XPOST 'localhost:9200/cust1/personal/_bulk?pretty&refresh' --data-binary @"customers_full.json"

curl -XPUT 'localhost:9200/subscribers/ppl/_bulk?pretty' -H 'Content-Type: application/json' -d @customers_full.json

curl -XPOST localhost:9200/subscribers/ppl/_bulk?pretty --data-binary @customers_full.json -H 'Content-Type: application/json'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

----------------
curl -H "Content-Type: application/json" -XPOST "localhost:9200/bank/_bulk?pretty&refresh" --data-binary "@accounts.json"
curl "localhost:9200/_cat/indices?v"
curl -X GET "localhost:9200/bank/_search?q=*&sort=account_number:asc&pretty"
----------------

curl -X GET "localhost:9200/cust1/_search?q=*&sort=name:asc&pretty"
curl -X PUT "localhost:9200/cust1/_mapping" -H 'Content-Type: application/json' -d'
{
  "properties": {
    "my_field": { 
      "type":     "text",
      "fielddata": true
    }
  }
}
'



As for the response, we see the following parts:

took – time in milliseconds for Elasticsearch to execute the search
timed_out – tells us if the search timed out or not
_shards – tells us how many shards were searched, as well as a count of the successful/failed searched shards
hits – search results
hits.total – an object that contains information about the total number of documents matching our search criteria

hits.total.value - the value of the total hit count (must be interpreted in the context of hits.total.relation).
hits.total.relation - whether hits.total.value is the exact hit count, in which case it is equal to "eq" or a lower bound of the total hit count (greater than or equals), in which case it is equal to gte.
hits.hits – actual array of search results (defaults to first 10 documents)
hits.sort - sort key for results (missing if sorting by score)
hits._score and max_score - ignore these fields for now



QUERY TERM SPECIFICATION - 2 WAYS
1. QUERY PARAMETERS (Search terms as URL query parameters)
	CURL
	FULL URL ON BROWSERS
2. REQUEST BODY (Search terms within the URL request body)
=======================================================================================
Search terms as URL query parameters
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?q=wyoming&pretty'

localhost:9200/customers/_search?q=wyoming&pretty

curl -XGET 'localhost:9200/customers/_search?q=wyoming&sort=age:desc&pretty'
curl -XGET 'localhost:9200/customers/_search?q=wyoming&sort=age:asc&pretty'

curl -XGET 'localhost:9200/customers/_search?q=state:kentucky&pretty'
curl -XGET 'localhost:9200/customers/_search?q=state:kentucky&sort=age:asc&pretty'

curl -XGET 'localhost:9200/customers/_search?q=state:kentucky&from=10&size=2&pretty'

curl -XGET 'localhost:9200/customers/_search?q=state:kentucky&pretty'

????
curl -XGET 'localhost:9200/customers/_search?q=state:kentucky&explain&pretty'


=======================================================================================
Searching using the request body
=======================================================================================

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} }
}
' 




curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {}
}
'

curl -XGET 'localhost:9200/customers/_search?pretty=true&q=*:*'



curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "size": 3
}
'


curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "size": 2
}
'


curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "from": 5, 
  "size": 3
}
'
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "sort": { "age": { "order": "desc" } },
  "size": 20
}
'

=======================================================================================
Search Multiple Indices
=======================================================================================
curl -XGET 'localhost:9200/customers,products/_search?pretty'

=======================================================================================
Search Multiple Doc Types
=======================================================================================
curl -XGET 'localhost:9200/products/shoes,laptops/_search?pretty'

=======================================================================================
ACTUAL SEARCH - Query terms and source filtering
=======================================================================================


curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query" : {
        "term" : { "name" : "gates" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query" : {
        "term" : { "street" : "chestnut" }
    }
}
'
=======================================================================================
Source filtering
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty'  -H 'Content-Type: application/json' -d'
{
    "_source" : false,
    "query" : {
        "term" : { "street" : "chestnut" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "_source" : "st*",
    "query" : {
        "term" : { "state" : "washington" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "_source" : ["st*", "*n*"],
    "query" : {
        "term" : { "state" : "washington" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
     "_source": {
        "includes": ["st*", "*n*"],
        "excludes": [ "*der" ]
     },
    "query" : {
        "term" : { "state" : "washington" }
    }
}
'

TERM VS MATCH
=======================================================================================
Full text queries
=======================================================================================
FULL TEXT QUERIES USING-
	match					- EACH WORD
	match_phrase			- FULL PHRASE
	match_phrase_prefix
	
=======================================================================================	
The match keyword
=======================================================================================

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
            "name" : "webster"
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
              "name" : {
                  "query" : "frank norris",
                  "operator" : "or"
               }        
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
              "name" : {
                  "query" : "frank norris",
                  "operator" : "and"
               }        
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
              "name" : {
                  "query" : "Jeannine Norris",
                  "operator" : "and"
               }        
        }
    }
}
'
----DEFAUL OPERATOR IS or
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
            "street" : "tompkins place"
        }
    }
}
'
=======================================================================================
The match_phrase keyword
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase" : {
            "street" : "tompkins place"
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase" : {
            "state" : "puerto rico"
        }
    }
}
'
=======================================================================================
The match_phrase_prefix
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase_prefix" : {
            "name" : "ma"
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase_prefix" : {
            "street" : "clymer st"
        }
    }
}
'
SLIDE_-------------
Relevance Algortihms
	FUZZY - Searches might look at how similar the search term is to the word present in the document
	TERM - Term searches might look at the percentage of search terms that were found in the document
	
Algortihms = TF/IDF 
			Term Frequency / Inverse Document Frequency
					Term Frequency - How often does the term appear in the field? == MORE OFTEN == MORE Relevance
					Inverse Document Frequency - How often does the term appear in the index? == MORE OFTEN == LESS Relevance
					Field-Length form - How long is the field which was searched? == Longer Fields == LESS Relevance
						

=======================================================================================
Common terms queries
=======================================================================================
First Search in
	LOW Frequency
	HIGH Frequency

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "common": {
            "reviews": {
                "query": "this is great",
                 "cutoff_frequency": 0.001
            }
        }
    }
}
'
#####  Cutoff Frequency - Terms with a frequency of > 0.1% are common terms


=======================================================================================
Boolean compound queries
=======================================================================================
Boolean Query can be used for more complex searches....
	must
	should
	must_not
	filter

=======================================================================================	
must
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must": [
        { "match": { "street": "ditmas" } },
        { "match": { "street": "avenue" } }
      ]
    }
  }
}
'

=======================================================================================
should
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty'  -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "should": [
        { "match": { "street": "ditmas" } },
        { "match": { "street": "street" } }
      ]
    }
  }
}
'
=======================================================================================
must_not
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty'  -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must_not": [
        { "match": { "state": "california texas" } },
        { "match": { "street": "lane street" } }
      ]
    }
  }
}
'
=======================================================================================
Term queries
=======================================================================================
Term Query - 
	The exact term needs to be found in the inverted index for indexed documents.
	The terms found in the index may vary based on how you analyze them.
	




curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "state": {
              "value": "idaho"
            }
          }
        },
        {
          "term": {
            "state": {
              "value": "california"
            }
          }
        }
      ]
    }
  }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "state": {
              "value": "idaho",
              "boost": 2.0
            }
          }
        },
        {
          "term": {
            "state": {
              "value": "california"
            }
          }
        }
      ]
    }
  }
}
'
=======================================================================================
Filters Context
=======================================================================================
Filters Context
	Documents in the results are not scored
	Each documents responds yes/no to wether it should be included in the result
	
	
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must": { "match_all": {} },
      "filter": {
        "range": {
          "age": {
            "gte": 20,
            "lte": 30
          }
        }
      }
    }
  }
}
'
=======================================================================================
Using filters along with search terms
=======================================================================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { 
    "bool": { 
      "must": 
        { "match": { 
             "state":   "alabama"
        }
      },
      "filter": [ 
        { "term":  { "gender": "female" }}, 
        { "range": { "age": { "gte": "50" }}} 
      ]
    }
  }
}
'

=======================================================================================

Demo 1 - Metrics aggregations,
=======================================================================================
Average
curl -XPOST 'localhost:9200/customers/_search?&pretty' -H 'Content-Type: application/json' -d'
{
   "size" : 0,
    "aggs" : {
        "avg_age" : { 
             "avg" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

curl -XPOST 'localhost:9200/customers/_search?&pretty' -H 'Content-Type: application/json' -d'
{
   "size" : 0,
    "aggregations" : {
        "avg_age" : { 
             "avg" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

curl -XPOST 'localhost:9200/customers/_search?&pretty' -H 'Content-Type: application/json' -d'
{
   "size" : 1,
    "aggs" : {
        "avg_age" : { 
             "avg" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

Average with some search terms

curl -XPOST 'localhost:9200/customers/_search?&pretty' -H 'Content-Type: application/json' -d'
{
    "size" : 0,
     "query" : {
          "bool" : {
               "filter" : {
                   "match" : { "state" : "minnesota" }
               }
           }
     },
    "aggs" : {
        "avg_age" : { 
             "avg" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

Stats

curl -XPOST 'localhost:9200/customers/_search?&pretty' -H 'Content-Type: application/json' -d'
{
    "size" : 0,
    "aggs" : {
        "age_stats" : { 
             "stats" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

Demo 2 - Aggregations might need fielddata, e.g. cardinality aggregation
Cardinality

curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
    "aggs" : {
        "age_count" : { 
             "cardinality" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
    "aggs" : {
        "gender_count" : { 
             "cardinality" : { 
                 "field" : "gender" 
             } 
         }
    }
}
'

curl -XPUT 'localhost:9200/customers/_mapping/personal?pretty' -d'
{
  "properties": {
    "gender": { 
      "type":     "text",
      "fielddata": true
    }                              
  }            
}         
'

Now re-run the original request
curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
    "aggs" : {
        "gender_count" : { 
             "cardinality" : { 
                 "field" : "gender" 
             } 
         }
    }
}
'

Demo 3 - Bucketing aggregation by field values

Term aggregations
curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
        "gender_bucket" : { 
             "terms" : { 
                 "field" : "gender" 
             } 
         }
    }
}
'
curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
        "age_bucket" : { 
             "terms" : { 
                 "field" : "age" 
             } 
         }
    }
}
'

Range aggregation

curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
       "age_ranges" : {
           "range" : {
               "field" : "age",
               "ranges" : [
                   { "to" : 30 },
                   { "from" : 30, "to" : 40 },
                   { "from" : 40, "to" : 55 },
                   { "from" : 55 }
                ]
            }
        }
     } 
}
'

curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
       "age_ranges" : {
           "range" : {
               "field" : "age",
               "keyed" : true,
               "ranges" : [
                   { "to" : 30 },
                   { "from" : 30, "to" : 40 },
                   { "from" : 40, "to" : 55 },
                   { "from" : 55 }
                ]
            }
        }
     } 
}
'

curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
       "age_ranges" : {
           "range" : {
               "field" : "age",
               "keyed" : true,
               "ranges" : [
                   { "key": "young", "to" : 30 },
                   { "key": "quarter-aged", "from" : 30, "to" : 40 },
                   { "key": "middle-aged", "from" : 40, "to" : 55 },
                   { "key": "senior", "from" : 55 }
                ]
            }
        }
     } 
}
'

Demo 4 - Nesting aggregations

2 level nesting
curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
        "gender_bucket" : { 
             "terms" : { 
                 "field" : "gender" 
             }, 
             "aggs": {
                 "average_age": {
                      "avg": {
                          "field": "age"
                      }
                 }
              }
         }
    }
}
'

3 level nesting
curl -XPOST 'localhost:9200/customers/_search?&pretty' -d'
{
   "size" : 0,
   "aggs" : {
        "gender_bucket" : { 
             "terms" : { 
                 "field" : "gender" 
             }, 
             "aggs" : {
                 "age_ranges" : {
                     "range" : {
                         "field" : "age",
                         "keyed" : true,
                         "ranges" : [
                             { "key": "young", "to" : 30 },
                             { "key": "middle-aged", "from" : 30, "to" : 55 },
                             { "key": "senior", "from" : 55 }
                          ]
                      },
                      "aggs": {
                          "average_age": {
                               "avg": {
                                   "field": "age"
                               }
                          }
                       }
                  }
               } 
         }
    }
}
'

Demo 5 - Filter and filters aggregations

curl -XPOST 'localhost:9200/customers/_search?size=0&pretty' -d'
{
    "aggs" : {
        "state" : {
            "filter" : { "term": { "state": "texas" } },
            "aggs" : {
                "avg_age" : { "avg" : { "field" : "age" } }
            }
        }
    }
}
'

Filters

curl -XGET 'localhost:9200/customers/_search?pretty'  -d'
{
  "size": 0,
  "aggs" : {
    "states" : {
      "filters" : {
        "filters" : {
          "washington" :   { "match" : { "state" : "washington"   }},
          "north carolina" :   { "match" : { "state" : "north carolina"   }},
          "south dakota" : { "match" : { "state" : "south dakota" }}
        }
      }
    }
  }
}
'

(Anonymous filters, returned in the same order as the original filter specification)
curl -XGET 'localhost:9200/customers/_search?pretty'  -d'
{
  "size": 0,
  "aggs" : {
    "states" : {
      "filters" : {
        "filters" : [
          { "match" : { "state" : "washington"   }},
          { "match" : { "state" : "north carolina"   }},
          { "match" : { "state" : "south dakota" }}
        ]
      }
    }
  }
}
'

Other bucket
curl -XGET 'localhost:9200/customers/_search?pretty'  -d'
{
  "size": 0,
  "aggs" : {
    "states" : {
      "filters" : {
        "other_bucket_key": "other_states",  
        "filters" : {
          "washington" :   { "match" : { "state" : "washington"   }},
          "north carolina" :   { "match" : { "state" : "north carolina"   }},
          "south dakota" : { "match" : { "state" : "south dakota" }}
        }
      }
    }
  }
}
'
