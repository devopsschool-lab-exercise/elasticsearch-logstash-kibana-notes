How to install Elastic Search?
===================================


Pre - OpenJDK

Platoform
	RHEL / CENTOS
	Ubuntu
	Windows
	Mac
========================================
http://devopsschool.com/tutorial/elastic/elastic-search-single-node-installation-and-verification-guide.html
IP - 13.235.77.5

Requirement  - RUN A Regular user
==================================================
Lab 1 - Setup your ElasticSearch in RHEL 7 / Centos

========================================================================

Basic workflow of Elastic Search
==============================================
Lots of files  ==> Index ===> SEARCH
=================================================
1. Create a index
2. insert documents into a index
3. Search

===========================
How to check query/communicate a Elastic Search?
=======================================================
So many == REST API
=======================================
curl -X<VERB> '<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>' -d '<BODY>'
============
Others - https://www.devopsschool.com/blog/what-are-the-method-to-interact-with-elastic-search/

Java REST Client
Java API
JavaScript API
Groovy API
.NET API
PHP API
Perl API
Python API
Ruby API
Community Contributed Clients

CURL support multiple method
====================================

1. Get a health of Clustors
curl -XGET localhost:9200/_cat/health?v&pretty


2. Get a health of nodes
curl -XGET http://localhost:9200/_cat/nodes?v&pretty

3. Get a lists of Index
curl -XGET 'localhost:9200/_cat/indices?v&pretty'

4. Create a index
curl -XPUT 'localhost:9200/products?&pretty'


5. Post data into it suing
		PUT
		POST

=curl -XPUT 'localhost:9200/products/mobiles/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 7",
  "camera": "12MP",
  "storage": "256GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'
curl -XPUT 'localhost:9200/products/mobiles/2?pretty' -d'
{
  "name": "Samsung Galaxy",
  "camera": "8MP",
  "storage": "128GB",
  "display": "5.2inch",
  "battery": "1,500mAh",
  "reviews": ["Best Android phone", "I love it!"]
}
'
curl -XPUT 'localhost:9200/products/mobiles/3?pretty' -d'
{
  "name": "Xiaomi Note",
  "camera": "10MP",
  "storage": "128GB",
  "display": "5.5inch",
  "battery": "1,500mAh",
  "reviews": ["Really love Xiaomi products", "Too large to use easily"]
}
'

curl -XPUT 'localhost:9200/products/laptops/1?pretty' -d'
{
  "name": "Macbook Pro",
  "storage": "500GB",
  "RAM": "8GB",
  "display": "13inch",
  "os": "El Capitan",
  "reviews": ["A little bulky but a great Mac laptop", "The larger storage capacity is great"]
}
'

curl -XPUT 'localhost:9200/products/laptops/2?pretty' -d'
{
  "name": "Dell",
  "storage": "1TB",
  "RAM": "8GB",
  "display": "14inch",
  "os": "Windows 10",
  "reviews": ["Great work laptop", "Not too heavy"]
}
'

curl -XPOST 'localhost:9200/products/mobiles?pretty' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

Demo 4 - Fetching whole and partial documents

curl -XGET 'localhost:9200/products/mobiles/1?pretty'
curl -XGET 'localhost:9200/products/laptops/1?pretty'

curl -XGET 'localhost:9200/products/laptops/10?pretty'


curl -XGET 'localhost:9200/products-temp/_search?pretty=true&q=*:*'
============================================================
============================================================
============================================================
Interact with Elastic search using REST API with curl !

# Download the latest release with the command:

$ curl -X GET "localhost:9200/_cat"
=^.^=
/_cat/allocation
/_cat/shards
/_cat/shards/{index}
/_cat/master
/_cat/nodes
/_cat/tasks
/_cat/indices
/_cat/indices/{index}
/_cat/segments
/_cat/segments/{index}
/_cat/count
/_cat/count/{index}
/_cat/recovery
/_cat/recovery/{index}
/_cat/health
/_cat/pending_tasks
/_cat/aliases
/_cat/aliases/{alias}
/_cat/thread_pool
/_cat/thread_pool/{thread_pools}
/_cat/plugins
/_cat/fielddata
/_cat/fielddata/{fields}
/_cat/nodeattrs
/_cat/repositories
/_cat/snapshots/{repository}
/_cat/templates
[ec2-user@ip-172-31-5-179 ~]$

$ curl -X GET "localhost:9200/_cat/shards"
$ curl -X GET "localhost:9200/_cat/master"
$ curl -X GET "localhost:9200/_cat/nodes"
$ curl -X GET "localhost:9200/_cat/indices"
$ curl -X GET "localhost:9200/_cat/health"
$ curl -X GET "localhost:9200/_cat/count
$ curl -X GET "localhost:9200/_cat/count/{index}

# Verbose Mode - Each of the commands accepts a query string parameter v to turn on verbose output.
$ curl -X GET "localhost:9200/_cat/master?v"
$ curl -X GET "localhost:9200/_cat/shards?v"
$ curl -X GET "localhost:9200/_cat/nodes?v"
$ curl -X GET "localhost:9200/_cat/indices?v"
$ curl -X GET "localhost:9200/_cat/health?v"
$ curl -X GET "localhost:9200/_cat/count?v"

# # # # # # # # formatting # # # # # # # # # # # 

# print output with indentation
?pretty=true

# print output in YAML format
?format=yaml

# print units with human readable units
?human=

# print ouput flattened
?flat_settings=

# explain more details about query execution
?explain

# include detailed debug output on failure
&error_trace=true

# filter to only receive specific fields
&filter_path=
&filter_path=,
&filter_path=.
&filter_path=.*
&filter_path=.**
&filter_path=-

# Help Mode - Each of the commands accepts a query string parameter help which will output its available columns.
$ curl -X GET "localhost:9200/_cat/master?help"
$ curl -X GET "localhost:9200/_cat/shards?help"
$ curl -X GET "localhost:9200/_cat/nodes?help"
$ curl -X GET "localhost:9200/_cat/indices?help"
$ curl -X GET "localhost:9200/_cat/health?help"
$ curl -X GET "localhost:9200/_cat/help?help"

# Headers - Each of the commands accepts a query string parameter h which forces only those columns to appear.
$ curl -X GET 'localhost:9200/_cat/nodes?h=ip,port,heapPercent,name'


# Check clustor health status:
curl -XGET 'localhost:9200/_cluster/health?pretty'
curl -XGET 'localhost:9200/_cat/health?v'
curl localhost:9200/_cat/health?help
curl 'localhost:9200/_cat/health?format=json&pretty'

# Check nodeâ€™s health status:
curl -XGET 'localhost:9200/_cat/nodes?pretty'
curl -XGET 'localhost:9200/_cat/nodes?pretty'
curl localhost:9200/_cat/nodes?v
curl localhost:9200/_cat/nodes?help
curl 'localhost:9200/_cat/nodes?format=json&pretty'


Elasticsearch Workflow - CRUD - Create - Read - Update - Delete



Working with Indices

# curl and listing all indices and help
curl -XGET 'localhost:9200/_cat/indices?v&pretty'
curl -XGET 'localhost:9200/_cat/indices?help'

# To create products index
curl -XPUT 'localhost:9200/products?&pretty'

# To create products-temp index
curl -XPUT 'localhost:9200/products-temp?&pretty'

# To create customers index
curl -XPUT 'localhost:9200/customers?&pretty'

# To create customers index
curl -XPUT 'localhost:9200/customers?&pretty'

# curl and listing all indices and help
curl -XGET 'localhost:9200/_cat/indices?v&pretty'
curl -XGET 'localhost:9200/_cat/indices?help'

Where, 
products -> index
mobiles - Category OR TYPE
1 - index UUID
-d - Content of the document in JSON BODY

curl -XPUT 'localhost:9200/products/mobiles/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 7",
  "camera": "12MP",
  "storage": "256GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

---OUTPUT------
{
  "_index" : "products",
  "_type" : "mobiles",
  "_id" : "1",
  "_version" : 1,
  "result" : "created",
  "_shards" : {
    "total" : 2,
    "successful" : 1,
    "failed" : 0
  },
  "_seq_no" : 0,
  "_primary_term" : 1
}

curl -XPUT 'localhost:9200/products/mobiles/2?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Samsung Galaxy",
  "camera": "8MP",
  "storage": "128GB",
  "display": "5.2inch",
  "battery": "1,500mAh",
  "reviews": ["Best Android phone", "I love it!"]
}
'
curl -XPUT 'localhost:9200/products/mobiles/3?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Xiaomi Note",
  "camera": "10MP",
  "storage": "128GB",
  "display": "5.5inch",
  "battery": "1,500mAh",
  "reviews": ["Really love Xiaomi products", "Too large to use easily"]
}
'

curl -XPOST 'localhost:9200/products/mobiles/4?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'
curl -XPOST 'localhost:9200/products/mobiles?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 6s",
  "camera": "12MP",
  "storage": "128GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'

curl -XPUT 'localhost:9200/products-temp/laptops/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Macbook Pro",
  "storage": "500GB",
  "RAM": "8GB",
  "display": "13inch",
  "os": "El Capitan",
  "reviews": ["A little bulky but a great Mac laptop", "The larger storage capacity is great"]
}
'


curl -XPUT 'localhost:9200/products-temp/laptops/2?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Dell",
  "storage": "1TB",
  "RAM": "8GB",
  "display": "14inch",
  "os": "Windows 10",
  "reviews": ["Great work laptop", "Not too heavy"]
}
'
Fetching whole documents from Indices

curl -XGET 'localhost:9200/products/mobiles/1'
curl -XGET 'localhost:9200/products/mobiles/1?pretty'
curl -XGET 'localhost:9200/products/mobiles/2?pretty'
curl -XGET 'localhost:9200/products/mobiles/3?pretty'
curl -XGET 'localhost:9200/products/mobiles/4?pretty'

Fetching partial documents

curl -XGET 'localhost:9200/products/mobiles/1?pretty'
curl -XGET 'localhost:9200/products/mobiles/1?pretty&_source=false'
curl -XGET 'localhost:9200/products/mobiles/1?pretty&_source=name,reviews'
curl -XGET 'localhost:9200/products/mobiles/1?pretty&_source=name,reviews,storage'
curl -XGET 'localhost:9200/products-temp/laptops/1?pretty&_source=name,RAM,storage'

List all the documents in Indices

curl -XGET 'localhost:9200/_cat/indices?v&pretty'
curl -XGET 'localhost:9200/products/_search?pretty=true&q=*:*'
curl -XGET 'localhost:9200/products-temp/_search?pretty=true&q=*:*'

=====Updating whole documents

curl -XGET 'localhost:9200/products/mobiles/3?pretty'

curl -XPUT 'localhost:9200/products/mobiles/3?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Xiaomi Note",
  "camera": "12MP",
  "storage": "256GB",
  "display": "5.5inch",
  "battery": "1,800mAh",
  "reviews": ["Welcome to ELk Session"]
}
'
=====Updating  partial documents
curl -XPUT 'localhost:9200/products/mobiles/3?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Xiaomi Note",
  "camera": "22MP",
  "storage": "1000GB"
}
'

curl -XPUT 'localhost:9200/products/mobiles/3?pretty' -d'
{
  "name": "Xiaomi Note",
  "camera": "12MP",
  "storage": "256GB",
}
'

================================================================
Partial Updates using the _update API with "doc"
================================================================
https://www.devopsschool.com/blog/understanding-the-update-api-in-elasticsearch/

curl -XGET 'localhost:9200/products/mobiles/2?pretty'

curl -XPOST 'localhost:9200/products/mobiles/2/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "doc": {
     "color": "black"
  }
}
'

curl -XGET 'localhost:9200/products/mobiles/2?pretty'

curl -XPOST 'localhost:9200/products/mobiles/2/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "doc": {
     "reviews": ["Best Android phone", "I love it!", "Samsung is my favorite"],
     "texture": "smooth"
  }
}
'
================================================================
Partial Updates using the _update API with "script"
================================================================

curl -XPUT 'localhost:9200/products-shoe?&pretty'

curl -XPUT 'localhost:9200/products-shoe/shoes/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Nike",
  "size": 8,
  "color": "white"
}
'

curl -XGET 'localhost:9200/products-shoe/shoes/1?pretty'

curl -XPOST 'localhost:9200/products-shoe/shoes/1/_update?pretty' -H 'Content-Type: application/json' -d'
{
  "script": "ctx._source.size += 2"
}
'
curl -XGET 'localhost:9200/products-shoe/shoes/1?pretty'

curl -XGET 'localhost:9200/products-shoe/shoes/2?pretty'
curl -XPOST 'localhost:9200/products-shoe/shoes/2/_update?pretty' -d'
{
  "script": "ctx._source.size -= 1"
}
'
curl -XGET 'localhost:9200/products-shoe/shoes/2?pretty'

Deleting a document in Index
curl -XGET 'localhost:9200/products/mobiles/2?pretty'
curl -XDELETE 'localhost:9200/products/mobiles/2?pretty'
curl -XGET 'localhost:9200/products/mobiles/2?pretty'



curl -XGET 'localhost:9200/products/mobiles/1?pretty'

Deleting a field in document of index
curl -XPOST 'localhost:9200/products/mobiles/1/_update' -H 'Content-Type: application/json' -d '{
    "script" : "ctx._source.remove(\"display\")"
}'


Deleting an index

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

curl -XDELETE 'localhost:9200/orders?pretty'
curl -XDELETE 'localhost:9200/products?pretty'
curl -XDELETE 'localhost:9200/products-shoe?pretty'
curl -XDELETE 'localhost:9200/products-temp?pretty'
curl -XDELETE 'localhost:9200/customers?pretty'

curl -XGET 'localhost:9200/_cat/indices?v&pretty'

=====================================================================
BULK OPERATIONS --------------------------
=======================================================================

curl -XPUT 'localhost:9200/products?&pretty'

curl -XPUT 'localhost:9200/products/mobiles/1?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "iPhone 7",
  "camera": "12MP",
  "storage": "256GB",
  "display": "4.7inch",
  "battery": "1,960mAh",
  "reviews": ["Incredibly happy after having used it for one week", "Best iPhone so far", "Very expensive, stick to Android"]
}
'
curl -XPUT 'localhost:9200/products/mobiles/2?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Samsung Galaxy",
  "camera": "8MP",
  "storage": "128GB",
  "display": "5.2inch",
  "battery": "1,500mAh",
  "reviews": ["Best Android phone", "I love it!"]
}
'

curl -XPUT 'localhost:9200/products/mobiles/3?pretty' -H 'Content-Type: application/json' -d'
{
  "name": "Xiaomi Note",
  "camera": "10MP",
  "storage": "128GB",
  "display": "5.5inch",
  "battery": "1,500mAh",
  "reviews": ["Really love Xiaomi products", "Too large to use easily"]
}
'
curl -XGET 'localhost:9200/products/_search?pretty=true&q=*:*'

curl -XGET 'localhost:9200/_mget?pretty' -H 'Content-Type: application/json' -d'
{
    "docs" : [
        {
            "_index" : "products",
            "_type" : "mobiles",
            "_id" : "T_xJwGoBTetr6lz4ziNX"
        },
        {
            "_index" : "products",
            "_type" : "mobiles",
            "_id" : "3"
        }
    ]
}
'

sudo yum install wget -y
wget https://www.devopsschool.com/notes/elastic/elasticsearch/customers_full.json

curl -H "Content-Type: application/x-ndjson" -XPOST 'localhost:9200/customers/personal/_bulk?pretty&refresh' --data-binary @"customers_full.json"

www.devopsschool.com/lms

curl -H "Content-Type: application/x-ndjson" -XPOST 'localhost:9200/customers/personal/_bulk?pretty&refresh' --data-binary @"customers_full.json"

curl -XGET 'localhost:9200/_cat/indices?v&pretty'
=================================================================
=================================================================
Context of DSQL Query
	Query Context 
	Fillter Context 

Query Context 
	DSL Query in URL pAram
	DSL Query in URL BODY

DSL Query in URL pAram
======================================================
Demo 2: Searching using the query parameter

curl -XGET 'localhost:9200/customers/_search?q=wyoming&pretty'

curl -XGET localhost:9200/customers/_search?q=wyoming&pretty

curl -XGET localhost:9200/customers/_search?q=wyoming&sort=age:desc&pretty

curl -XGET localhost:9200/customers/_search?q=state:kentucky&sort=age:asc&pretty

curl -XGET localhost:9200/customers/_search?q=state:kentucky&from=10&size=2&pretty

curl -XGET localhost:9200/customers/_search?q=state:kentucky&explain&pretty

DSL Query in URL BODY
==============================================================
MATCH ALL
===========
------------ERROR FOR NO QUERY----------------
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d
'
{
  "query": {}
}
'

curl -X GET "localhost:9200/_search" -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_all": {}
    }
}
'
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "size": 3
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "from": 5, 
  "size": 3
}
'
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { "match_all": {} },
  "sort": { "age": { "order": "desc" } },
  "size": 20
}
'

=================================================
Query terms and source filtering
Source filtering to include only those  fields that weâ€™re interested in
Returns documents that contain an exact term in a provided field.
=================================================

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query" : {
        "term" : { "name" : "gates" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query" : {
        "term" : { "street" : "chestnut" }
    }
}
'

Source filtering
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "_source" : false,
    "query" : {
        "term" : { "street" : "chestnut" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "_source" : "st*",
    "query" : {
        "term" : { "state" : "washington" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "_source" : ["st*", "*n*"],
    "query" : {
        "term" : { "state" : "washington" }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
     "_source": {
        "includes": ["st*", "*n*"],
        "excludes": [ "*der" ]
     },
    "query" : {
        "term" : { "state" : "washington" }
    }
}
'

Full text queries
===========
	The match keyword
	The match_phrase keyword
	The match_phrase_prefix

------------------------
The match keyword
The standard query for performing full text queries, including fuzzy matching and phrase or proximity queries.

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
            "name" : "webster"
        }
    }
}
'



curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
              "name" : {
                  "query" : "frank norris",
                  "operator" : "or"
               }        
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
            "street" : "tompkins place"
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match" : {
              "street" : {
                  "query" : "tompkins place",
                  "operator" : "or"
               }        
        }
    }
}
'



The match_phrase keyword
=========================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase" : {
            "street" : "tompkins place"
        }
    }
}
'

The match_phrase_prefix
=========================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase_prefix" : {
            "name" : "ma"
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "match_phrase_prefix" : {
            "street" : "clymer st"
        }
    }
}
'



==============================================================
==============================================================

Boolean compound queries

must
curl -XGET 'localhost:9200/customers/_search?pretty'  -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must": [
        { "match": { "street": "ditmas" } },
        { "match": { "street": "avenue" } }
      ]
    }
  }
}
'
should
curl -XGET 'localhost:9200/customers/_search?pretty'  -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "should": [
        { "match": { "street": "ditmas" } },
        { "match": { "street": "street" } }
      ]
    }
  }
}
'

must_not
curl -XGET 'localhost:9200/customers/_search?pretty'  -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must_not": [
        { "match": { "state": "california texas" } },
        { "match": { "street": "lane street" } }
      ]
    }
  }
}
'
====================================
Common terms queries
====================================
The common terms query is a modern alternative to stopwords which improves the precision and recall of search results (by taking stopwords into account), without sacrificing performance.

The common terms query divides the query terms into two groups: more important (ie low frequency terms) and less important (ie high frequency terms which would previously have been stopwords).

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "common": {
            "reviews": {
                "query": "this is great",
                 "cutoff_frequency": 0.001
            }
        }
    }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
    "query": {
        "common": {
            "street": {
                "query": "this is street",
                 "cutoff_frequency": 0.001
            }
        }
    }
}
'

Boolean compound queries with TERM
======================================

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "state": {
              "value": "idaho"
            }
          }
        },
        {
          "term": {
            "state": {
              "value": "california"
            }
          }
        }
      ]
    }
  }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "state": {
              "value": "idaho"
            }
          }
        },
        {
          "term": {
            "state": {
              "value": "california"
            }
          }
        }
      ]
    }
  }
}
'

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "state": {
              "value": "idaho",
              "boost": 2.0
            }
          }
        },
        {
          "term": {
            "state": {
              "value": "california"
            }
          }
        }
      ]
    }
  }
}
'
=====================================================
=====================================================
FILTER
=====================================================
=====================================================

curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must": { "match_all": {} },
      "filter": {
        "range": {
          "age": {
            "gte": 20,
            "lte": 30
          }
        }
      }
    }
  }
}
'

Using filters along with search terms
=============================================
curl -XGET 'localhost:9200/customers/_search?pretty' -H 'Content-Type: application/json' -d'
{
  "query": { 
    "bool": { 
      "must": 
        { "match": { 
             "state":   "alabama"
        }
      },
      "filter": [ 
        { "term":  { "gender": "female" }}, 
        { "range": { "age": { "gte": "50" }}} 
      ]
    }
  }
}
'
